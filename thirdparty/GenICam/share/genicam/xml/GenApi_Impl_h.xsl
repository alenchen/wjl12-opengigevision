<?xml version="1.0" encoding="UTF-8"?>
<!-- ***************************************************************************
*  (c) 2004, 2005 by Basler Vision Technologies
*  Section: Vision Components
*  Project: GenApi
*  Author:  Fritz Dierks
* $Header: /cvs/genicam/genicam/xml/GenApi/GenApi_Impl_h.xsl,v 1.8.2.1 2008/07/14 09:22:21 hartmut_nebelung Exp $
*
*  License: This file is published under the license of the EMVA GenICam  Standard Group. 
*  A text file describing the legal terms is included in  your installation as 'GenICam_license.pdf'. 
*  If for some reason you are missing  this file please contact the EMVA or visit the website
*  (http://www.genicam.org) for a full copy.
* 
*  THIS SOFTWARE IS PROVIDED BY THE EMVA GENICAM STANDARD GROUP "AS IS"
*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  
*  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  
*  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE EMVA GENICAM STANDARD  GROUP 
*  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL, 
*  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  LIMITED TO, 
*  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  DATA, OR PROFITS; 
*  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  THEORY OF LIABILITY, 
*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE) 
*  ARISING IN ANY WAY OUT OF THE USE  OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
*  POSSIBILITY OF SUCH DAMAGE.
******************************************************************************** -->
<xsl:stylesheet version="1.0" xmlns:my="http://www.genicam.org/GenApi/Version_1_0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:include href="text.xsl" />
<xsl:template match="/">
//-----------------------------------------------------------------------------
//  (c) 2004, 2005 by Basler Vision Technologies
//  Section: Vision Components
//  Project: GenApi
//-----------------------------------------------------------------------------
/*!
	\file  
*/
//-----------------------------------------------------------------------------
//  This file is generated automatically
//  Do not modify!
//-----------------------------------------------------------------------------

#ifndef <xsl:value-of select="/my:RegisterDescription/@VendorName"/>_<xsl:value-of select="/my:RegisterDescription/@ModelName"/>Impl_H
#define <xsl:value-of select="/my:RegisterDescription/@VendorName"/>_<xsl:value-of select="/my:RegisterDescription/@ModelName"/>Impl_H

#if defined (_MSC_VER) &amp;&amp; defined (_WIN32)
#   include &lt;GenApi/<xsl:value-of select="/my:RegisterDescription/@VendorName"/>/<xsl:value-of select="/my:RegisterDescription/@ModelName"/>.h&gt;
#elif defined (__GNUC__) &amp;&amp; defined (__linux__)
#   include "<xsl:value-of select="/my:RegisterDescription/@ModelName"/>.h"
#else
#   error Unknown/unsupported platform
#endif

#if defined(_MSC_VER)
#   pragma warning(push)
#   pragma warning(disable: 4068) // unknown pragma (generated by bullseye coverage pragmas)
#   if defined(NDEBUG)
        // You may get a C4702 unreachable code in optimized builds. Thats why we disable it only in release builds#   if defined(NDEBUG)
#       pragma warning(disable: 4702) // unreachable code
#   endif
#endif

#include &lt;GenApi/impl/GenApiImpl.h&gt;

#if defined(_MSC_VER) &amp;&amp; defined(NDEBUG)
#   pragma warning(pop)
#endif


//! The namespace containing the device's control interface and related enumeration types
namespace <xsl:value-of select="/my:RegisterDescription/@VendorName"/>_<xsl:value-of select="/my:RegisterDescription/@ModelName"/>
{

	//! <xsl:value-of select="/my:RegisterDescription/@ToolTip"/>
	class C<xsl:value-of select="/my:RegisterDescription/@ModelName"/>Impl : public GenApi::CNodeMap
	{
	public:
		//! Constructor
		C<xsl:value-of select="/my:RegisterDescription/@ModelName"/>Impl(GenICam::gcstring DeviceName);

		//! creates a nodemap object
		static INodeMap* Create(GenICam::gcstring DeviceName);

		//! Makes the object to destroy itself
		virtual void Destroy(void);

		//----------------------------------------------------------------------------------------------------------------
		// Features
		//----------------------------------------------------------------------------------------------------------------
		<xsl:apply-templates select="/my:RegisterDescription/my:*" mode="DeclaringMembers"/>

	private:
		//! Function doing final initializations
		void FinalConstruct(void);

		//----------------------------------------------------------------------------------------------------------------
		// Initialization methods
		//----------------------------------------------------------------------------------------------------------------
		<xsl:apply-templates select="/my:RegisterDescription/my:*" mode="InitializingMethodDefinition"/>
	};
}

#endif // <xsl:value-of select="/my:RegisterDescription/@VendorName"/>_<xsl:value-of select="/my:RegisterDescription/@ModelName"/>Impl_H
</xsl:template>

<!-- =========================================================================== -->
<!-- DeclaringMembers                                                                                                                                -->
<!-- =========================================================================== -->

	<xsl:template match="my:*" mode="DeclaringMembers">
		/*! \brief <xsl:value-of select="./my:ToolTip"/><xsl:text>&#10;</xsl:text>
		
        <xsl:call-template name="line1" />
         <xsl:call-template name="plainstr" >
 			<xsl:with-param name="substr" select="./my:Description" />
			<xsl:with-param name="ncol" select="80" />
         </xsl:call-template>
         <xsl:call-template name="line1" />
         <xsl:text>*/</xsl:text>
		<xsl:text>		GenApi::</xsl:text><xsl:variable name="NodeType" select="name()"/>
		<xsl:value-of select="document('NodeTypes.xml')//CppClass[../@Name=$NodeType]"/><xsl:text> </xsl:text>
		<xsl:value-of select="@Name"/>;
	</xsl:template>
	<xsl:template match="my:Enumeration" mode="DeclaringMembers">
		/*! <xsl:value-of select="./my:ToolTip"/><xsl:text>&#10;</xsl:text>
			<xsl:text>&#10;</xsl:text>
		    <xsl:value-of select="./my:Description"/><xsl:text>&#10;</xsl:text>
		<xsl:text> */ &#10;</xsl:text>
		<xsl:text>		GenApi::</xsl:text><xsl:variable name="NodeType" select="name()"/>
		<xsl:value-of select="document('NodeTypes.xml')//CppClass[../@Name=$NodeType]"/><xsl:text> </xsl:text><xsl:value-of select="@Name"/>;
	</xsl:template>

<!-- =========================================================================== -->
<!-- InitializingMethodDefinition                                                                                                                                -->
<!-- =========================================================================== -->

	<xsl:template match="my:*" mode="InitializingMethodDefinition">
		void SetProperties<xsl:value-of select="@Name"/>();
	</xsl:template>

</xsl:stylesheet>
